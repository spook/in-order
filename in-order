#! /usr/bin/perl -w
use strict;

#use utf8;

use File::Basename;
use Gtk2 '-init';
use Glib qw/TRUE FALSE/;
use Gtk2::SimpleList;
use URI::Encode qw/uri_decode uri_encode/;

use constant ID_ICONVIEW => 48;
use constant ID_LABEL    => 49;
use constant ID_URI      => 50;
use constant EEXIST      => 17;
my $BASEDIR = $ENV{HOME} . "/.in-order";
my $DROPLIST;    # global since we need to clear it
my $NLINK = 0;

# Create working dir for ordered softlinks

die "*** Cannot create directory $BASEDIR: $!\n"
    if !mkdir($BASEDIR) && ($! != EEXIST);

# Setup main window
my $MW = Gtk2::Window->new('toplevel');
$MW->signal_connect('delete_event' => sub {Gtk2->main_quit;});
$MW->set_border_width(5);
$MW->set_position('center_always');
$MW->add(&main_box);

# Load initial contents if any
load_list();

# Run it
$MW->show();
Gtk2->main();
exit 0;

#                           ------- o -------

sub do_clear {
    foreach my $oldlink (glob("$BASEDIR/*")) {
        unlink $oldlink
            or die "*** Cannot remove old link $oldlink: $!";
    }
    if ($DROPLIST) {
        while (@{$DROPLIST->{data}}) {
            shift @{$DROPLIST->{data}};
        }
    }
    $NLINK = 0;
}

sub item_list {
    $DROPLIST = Gtk2::SimpleList->new('Filename' => 'text');
    $DROPLIST->set_rules_hint(TRUE);
    $DROPLIST->set_headers_visible(FALSE);
    $DROPLIST->get_selection->set_mode('multiple');

    # Make this list be a drop target
    my @target_table = (
        {'target' => 'STRING',        'flags' => [], 'info' => ID_ICONVIEW},
        {'target' => "text/uri-list", 'flags' => [], 'info' => ID_URI},
        {'target' => "text/plain",    'flags' => [], 'info' => ID_LABEL},
    );
    $DROPLIST->drag_dest_set('all', ['copy'], @target_table);
    $DROPLIST->signal_connect('drag-data-received' => \&target_drag_data_received, $DROPLIST);

    # It can also be a drag source
    $DROPLIST->drag_source_set(
        ['button1_mask', 'button3_mask'],
        ['copy'],
        {   'target' => 'text/uri-list',
            'flags'  => [],
            'info'   => ID_URI,
        },
    );

    #set up the data which needs to be fed to the drag destination (drop)
    $DROPLIST->signal_connect(
        'drag-data-get' => sub {
            print "signal called got @_\n";
            my @selected   = $DROPLIST->get_selected_indices();
            my $uri_string = q{};
            my @items      = @{$DROPLIST->{data}};
            foreach my $idx (@selected) {
                $uri_string .= "file:///$BASEDIR/" . $items[$idx]->[0] . "\n";
            }
            source_drag_data_get(
                @_, $uri_string
                );
        }
    );

    # Stick it in a scrolled window so it can grow
    my $sw = Gtk2::ScrolledWindow->new(undef, undef);
    $sw->set_policy('never', 'automatic');
    $sw->add($DROPLIST);
    $sw->set_border_width(6);
    $sw->set_size_request(600, 250);
    return $sw;
}

sub load_list {
    foreach my $oldlink (glob("$BASEDIR/*")) {
        push @{$DROPLIST->{data}}, basename($oldlink);
    }
}

sub main_box {
    my $box = Gtk2::VBox->new(FALSE, 5);
    my $button = Gtk2::Button->new("Clear");
    $button->signal_connect(clicked => \&do_clear, $MW);
    $box->add($button);
    my $label = Gtk2::Label->new("Drag playlist to the below window for sequencing.\n"
                               . "Sorted links will be written to $BASEDIR");
    $box->add($label);
    my $h_paned = Gtk2::HPaned->new();
    $h_paned->pack2(item_list(), TRUE, FALSE);
    $box->add($h_paned);
    $box->show_all();
    return $box;
}

sub source_drag_data_get {
    my ($widget, $context, $data, $info, $time, $string) = @_;
    $data->set_text($string, -1);
}

sub target_drag_data_received {

    my ($widget, $context, $x, $y, $data, $info, $time, $droplist) = @_;

    #    if ($info eq ID_LABEL) {
    #        push @{$droplist->{data}}, [$data->data];
    #    }

    if ($info eq ID_URI) {
        foreach my $uri ($data->get_uris) {
            my $filename = uri_decode($uri);
            $filename =~ s{^file://}{};
            my $linkname = basename($filename);
            $linkname =~ s{^\d+\.?\s*}{};
            $linkname =~ s{[^a-z0-9\.\,\;\-]}{-}ig;
            $linkname =~ s{[\ ]}{_}g;
            $linkname =~ s{^(.{1,53}).*?(\.mp3)$}{$1$2}i;    # Limit length so whole is < 64 chars
            $linkname = sprintf("%5.5d:%s", ++$NLINK, $linkname);
            utf8::downgrade($filename);

            if (!symlink($filename, "$BASEDIR/$linkname")) {
                print "*** Error creating link: $!\n";
                continue;
            }

            push @{$droplist->{data}}, [$linkname];
        }
    }

    #    if ($info eq ID_ICONVIEW) {
    #        push @{$droplist->{data}}, [$data->data];
    #    }

    $context->finish(0, 0, $time);
}

